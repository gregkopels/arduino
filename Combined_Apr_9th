//Amos Kopels and Friend
#include "blunoAccessory.h"
#include <Adafruit_GPS.h>
#include <SoftwareSerial.h>




blunoAccessory myAccessory;


// If you're using the Adafruit GPS shield, change
// SoftwareSerial mySerial(3, 2); -> SoftwareSerial mySerial(8, 7);
// and make sure the switch is set to SoftSerial

// If using software serial, keep this line enabled
// (you can change the pin numbers to match your wiring):
SoftwareSerial mySerial(8, 7);
SoftwareSerial BT(10, 11); 

Adafruit_GPS GPS(&mySerial);


// Set GPSECHO to 'false' to turn off echoing the GPS data to the Serial console
// Set to 'true' if you want to debug and listen to the raw GPS sentences.
#define GPSECHO  true

// this keeps track of whether we're using the interrupt
// off by default!
boolean usingInterrupt = false;
void useInterrupt(boolean); // Func prototype keeps Arduino 0023 happy


void setup() 
{
  //Bluetooth Settings
  // set digital pin to control as an output
  pinMode(13, OUTPUT);
  // set the data rate for the SoftwareSerial port
  BT.begin(9600);
  // Send test message to other device
  // BT.println("Acme - Location, Temperature, Humidity");
  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  
  //GPS Settings
  GPS.begin(9600);
  // uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  // uncomment this line to turn on only the "minimum recommended" data
  //GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  // For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
  // the parser doesn't care about other sentences at this time
  // Set the update rate
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);   // 1 Hz update rate
  // For the parsing code to work nicely and have time to sort thru the data, and
  // print it out we don't suggest using anything higher than 1 Hz
  // Request updates on antenna status, comment out to keep quiet
  GPS.sendCommand(PGCMD_ANTENNA);
  // the nice thing about this code is you can have a timer0 interrupt go off
  // every 1 millisecond, and read data from the GPS for you. that makes the
  // loop code a heck of a lot easier!
  useInterrupt(true);  
}

// Interrupt is called once a millisecond, looks for any new GPS data, and stores it
SIGNAL(TIMER0_COMPA_vect) {
  char c = GPS.read();
  // if you want to debug, this is a good time to do it!
#ifdef UDR0
  if (GPSECHO)
    if (c) UDR0 = c;
    // writing direct to UDR0 is much much faster than Serial.print
    // but only one character can be written at a time.
#endif
}

void useInterrupt(boolean v) {
  if (v) {
    // Timer0 is already used for millis() - we'll just interrupt somewhere
    // in the middle and call the "Compare A" function above
    OCR0A = 0xAF;
    TIMSK0 |= _BV(OCIE0A);
    usingInterrupt = true;
  } else {
    // do not call the interrupt function COMPA anymore
    TIMSK0 &= ~_BV(OCIE0A);
    usingInterrupt = false;
  }
}

char a; // stores incoming character from other device
uint32_t timer = millis();
void loop() 
{
    // put your main code here, to run repeatedly:
  float h = myAccessory.readHumidity();
  float t = myAccessory.readTemperature();
  BT.print("Humidity: ");
  BT.print(h);
  BT.print(" %\t");
  BT.print("Temperature: ");
  BT.print(t);
  BT.println(" *C");
  delay(5000);                   // wait for a second
 // in case you are not using the interrupt above, you'll
  // need to 'hand query' the GPS, not suggested :(
  if (! usingInterrupt) {
    // read data from the GPS in the 'main loop'
    char c = GPS.read();
    // if you want to debug, this is a good time to do it!
    if (GPSECHO)
      if (c) BT.print(c);
  }
 // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived()) {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trytng to print out data
    //Serial.println(GPS.lastNMEA());   // this also sets the newNMEAreceived() flag to false

    if (!GPS.parse(GPS.lastNMEA()))   // this also sets the newNMEAreceived() flag to false
      return;  // we can fail to parse a sentence in which case we should just wait for another
  }
 // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived()) {
    // a tricky thing here is if we print the NMEA sentence, or data1
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trytng to print out data
    //Serial.println(GPS.lastNMEA());   // this also sets the newNMEAreceived() flag to false

    if (!GPS.parse(GPS.lastNMEA()))   // this also sets the newNMEAreceived() flag to false
      return;  // we can fail to parse a sentence in which case we should just wait for another
  }

  // if millis() or timer wraps around, we'll just reset it
  if (timer > millis())  timer = millis();

  // approximately every 2 seconds or so, print out the current stats
  if (millis() - timer > 2000) 
    timer = millis(); // reset the timer

    BT.print("\nTime: ");
    BT.print(GPS.hour, DEC); BT.print(':');
    BT.print(GPS.minute, DEC); BT.print(':');
    BT.print(GPS.seconds, DEC); BT.print('.');
//    BT.println(GPS.milliseconds);
    BT.print("Date: ");
    BT.print(GPS.day, DEC); BT.print('/');
    BT.print(GPS.month, DEC); BT.print("/20");
    BT.println(GPS.year, DEC);
//    BT.print("Fix: "); BT.print((int)GPS.fix);
//    BT.print(" quality: "); BT.println((int)GPS.fixquality);
    if (GPS.fix) {
//      BT.print("Location: ");
//      BT.print(GPS.latitude, 4); BT.print(GPS.lat);
//      BT.print(", ");
//      BT.print(GPS.longitude, 4); BT.println(GPS.lon);
      BT.print("Location (in degrees, works with Google Maps): ");
      BT.print(GPS.latitudeDegrees, 4);
      BT.print(", ");
      BT.println(GPS.longitudeDegrees, 4);

      BT.print("Speed (knots): "); BT.println(GPS.speed);
//      BT.print("Angle: "); BT.println(GPS.angle);
//      BT.print("Altitude: "); BT.println(GPS.altitude);
//      BT.print("Satellites: "); BT.println((int)GPS.satellites);
    }
    
    if (a=='1')
  {
    digitalWrite(13, HIGH);
    BT.print(" %\t");
    BT.print("Temperature: ");
    BT.print(t);
  }
  if (a=='2')
  {
    digitalWrite(13, LOW);
    BT.print("Humidity: ");
    BT.print(h);
    BT.println(" *C");
  }
  if (a=='?')
  {
    BT.println("Send '1' to Temp");
    BT.println("Send '2' to Humdity");
  }
}
